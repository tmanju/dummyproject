package LP_DEFAULT

import com.thirdpillar.codify.loanpath.model.MetaInfo;
import org.apache.commons.lang.StringUtils;
import com.thirdpillar.foundation.model.BaseDataObject;
import com.thirdpillar.codify.loanpath.model.Request;
import com.thirdpillar.codify.loanpath.model.Scoring;
import com.thirdpillar.codify.loanpath.model.Relationship;
import com.thirdpillar.codify.loanpath.model.Facility;
import com.thirdpillar.codify.loanpath.model.Customer;
import com.thirdpillar.codify.loanpath.util.Utility;
import com.thirdpillar.codify.loanpath.model.AttributeChoice;
import com.thirdpillar.foundation.service.LookupService;
import com.thirdpillar.foundation.service.EntityService;
import com.thirdpillar.codify.loanpath.model.FacScoring;
import com.thirdpillar.codify.loanpath.model.*;

import com.thirdpillar.codify.loanpath.constants.Constants;
import com.thirdpillar.codify.loanpath.model.WorkflowStatus;

import function com.thirdpillar.foundation.rules.RuleFunctions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.math.BigDecimal;
 
rule "Individual : Individual : NONINDVIDUAL_ATTR_YEAR_IN_BUSINESS"
	agenda-group "CalcScoringAttrNonIndividual" 
	when
		request : Request()
	then
		Scoring scoring = request.getLatestAppScoring();
		String value="";
		for(PartyScoring partyScoring : scoring.getPartyScorings())
		{
			if(partyScoring.getParty().isNonIndividual())
			{
				ScoringAttribute attr = partyScoring.findAttributeByKey("NONINDVIDUAL_ATTR_YEAR_IN_BUSINESS");
				if(partyScoring.getParty().getYearsInBusiness() != null){
					attr.setValue(String.valueOf(partyScoring.getParty().getYearsInBusiness()));
				}
			}		
		}
					
end

rule "Individual : Individual : NONINDVIDUAL_ATTR_BUSINESS_START_DATE"
	agenda-group "CalcScoringAttrNonIndividual" 
	when
		request : Request()
	then
		Scoring scoring = request.getLatestAppScoring();
		String value="";
		for(PartyScoring partyScoring : scoring.getPartyScorings())
		{
			if(partyScoring.getParty().isNonIndividual())
			{
				ScoringAttribute attr = partyScoring.findAttributeByKey("NONINDVIDUAL_ATTR_BUSINESS_START_DATE");
				if(partyScoring.getParty().getBusinessStartDttm() != null){
					attr.setValue(String.valueOf(partyScoring.getParty().getBusinessStartDttm()));
				}
			}		
		}
					
end
rule "NONINDVIDUAL_ATTR_CREDIT_SCORE"
 agenda-group "CalcScoringAttrNonIndividual" 
    when
          request : Request()
    then
        Scoring scoring = request.getLatestAppScoring();
        for(PartyScoring partyScoring : scoring.getPartyScorings())
		{
			ScoringAttribute attr = partyScoring.findAttributeByKey("NONINDVIDUAL_ATTR_CREDIT_SCORE");
	        boolean flag = false;
			List<FacilityCustomerRole> borrowerRoles = request.getAllCustomerRolesInRoles("PARTY_ROLE_TYPE_BORROWER");
		 
			List<BureauReport> reports = new ArrayList<BureauReport>();
			int maxFicoScore = 0;
			for (FacilityCustomerRole role : borrowerRoles) {
				Customer customer = null;
				if (role.getCustomer() != null && role.getCustomer().isIndividual()) {
					customer = role.getCustomer();
				} 
				if (customer != null && customer.isNonIndividual()) {
					Map<String,BureauReport> reportMap = request.getLatestBureauReports(customer);
					for (String reportName : reportMap.keySet()) {
						BureauReport report = reportMap.get(reportName);
						int ficoScore =0;
						if(report.getFicoScore()!=null && !report.getFicoScore().equals("")) {
							ficoScore=Integer.parseInt(report.getFicoScore());
							attr.setValue(String.valueOf(ficoScore));
						}
					}
				}				
			}
			
		}
        
		
end