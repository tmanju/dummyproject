
package LP_DEFAULT
import com.thirdpillar.codify.loanpath.model.MetaInfo;
import org.apache.commons.lang.StringUtils;
import com.thirdpillar.foundation.model.BaseDataObject;
import org.apache.commons.lang.NumberUtils;

import com.thirdpillar.codify.loanpath.util.Utility;
import com.thirdpillar.codify.loanpath.model.AttributeChoice;
import com.thirdpillar.foundation.service.LookupService;
import com.thirdpillar.foundation.service.EntityService;
import com.thirdpillar.codify.loanpath.model.FacScoring;
import com.thirdpillar.codify.loanpath.model.*;
import com.thirdpillar.codify.loanpath.constants.Constants;
import com.thirdpillar.codify.loanpath.model.WorkflowStatus;

import function com.thirdpillar.foundation.rules.RuleFunctions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;


rule "APPLICATION_RULE_AVERAGE_FICO_CUTOFF"
 agenda-group "CalcScoringRecommRuleApplication" 
    when
          request : Request()
    then
        Scoring scoring = request.getLatestAppScoring();
        ScoringRecommRule recommRule = scoring.findRecommRuleByKey( "APPLICATION_RULE_AVERAGE_FICO_CUTOFF");
        boolean flag = false;
		List<FacilityCustomerRole> borrowerRoles = request.getAllCustomerRolesInRoles("PARTY_ROLE_TYPE_BORROWER");
	 
		List<BureauReport> reports = new ArrayList<BureauReport>();
		int maxFicoScore = 0;
		for (FacilityCustomerRole role : borrowerRoles) {
			Customer customer = null;
			if (role.getCustomer() != null && role.getCustomer().isIndividual()) {
				customer = role.getCustomer();
			} else if (role.getCustomer() != null && role.getCustomer().isNonIndividual()){
				FacilityCustomerRole primaryContactRole = role.getPrimaryContactRole();
				if (primaryContactRole != null) {
					customer = primaryContactRole.getCustomer();
				}
			}
			if (customer != null && customer.isIndividual()) {
				Map<String,BureauReport> reportMap = request.getLatestBureauReports(customer);
				for (String reportName : reportMap.keySet()) {
					BureauReport report = reportMap.get(reportName);
					int ficoScore =0;
					if(report.getFicoScore()!=null && !report.getFicoScore().equals("")) {
						ficoScore=Integer.parseInt(report.getFicoScore());
						if (ficoScore >= 700) {
							flag=true;
							break;
						}
							
					}
				}
			}
			
			//breaking Customer Loop.
			if(flag) {
				break;
			}	
		}
		scoring.setRuleResult(recommRule, flag); 
end

rule "APPLICATION_RULE_REQUESTED_AMOUNT"
 agenda-group "CalcScoringRecommRuleApplication" 
    when
          request : Request()
    then
        Scoring scoring = request.getLatestAppScoring();
        ScoringRecommRule recommRule = scoring.findRecommRuleByKey( "APPLICATION_RULE_REQUESTED_AMOUNT");
        boolean flag = true;
        BigDecimal amountToCheck = new BigDecimal("250000");
        if(request.getTotalRequestedLoanAmt() != null && request.getTotalRequestedLoanAmt().compareTo(amountToCheck) > 0 ){
			flag = false;
        }
		scoring.setRuleResult(recommRule, flag); 
end