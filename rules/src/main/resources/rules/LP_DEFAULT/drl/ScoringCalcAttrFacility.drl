package LP_DEFAULT

import com.thirdpillar.codify.loanpath.model.MetaInfo;
import org.apache.commons.lang.StringUtils;
import com.thirdpillar.foundation.model.BaseDataObject;
import com.thirdpillar.codify.loanpath.model.Request;
import com.thirdpillar.codify.loanpath.model.Scoring;
import com.thirdpillar.codify.loanpath.model.Relationship;
import com.thirdpillar.codify.loanpath.model.Facility;
import com.thirdpillar.codify.loanpath.model.Customer;
import com.thirdpillar.codify.loanpath.util.Utility;
import com.thirdpillar.codify.loanpath.model.AttributeChoice;
import com.thirdpillar.foundation.service.LookupService;
import com.thirdpillar.foundation.service.EntityService;
import com.thirdpillar.codify.loanpath.model.FacScoring;
import com.thirdpillar.codify.loanpath.model.*;
import com.thirdpillar.codify.loanpath.constants.Constants;
import com.thirdpillar.codify.loanpath.model.WorkflowStatus;

import function com.thirdpillar.foundation.rules.RuleFunctions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;


rule "FAC_ATTR_REQUESTED_AMOUNT"
	agenda-group "CalcScoringAttrFacility"
	salience 50  
	when
		request : Request()
		f:Facility() from request.allFacilities
	then
		Scoring scoring = request.getLatestAppScoring();
		BigDecimal total = BigDecimal.ZERO;
		for(FacScoring facScoring : scoring.getFacScorings())
		{
			ScoringAttribute attr = facScoring.findAttributeByKey("FAC_ATTR_REQUESTED_AMOUNT");
			if(f.getRequestedLoanAmtDer() != null){
				total = f.getRequestedLoanAmtDer();
			}
			
			attr.setValue(String.valueOf(total));	
		}
					
end

rule "FAC_ATTR_CREDIT_SCORE"
	agenda-group "CalcScoringAttrFacility"
	salience 50  
	when
		request : Request()
		f:Facility() from request.allFacilities
	then
		Scoring scoring = request.getLatestAppScoring();
		for(FacScoring facScoring : scoring.getFacScorings())
		{
			ScoringAttribute attr = facScoring.findAttributeByKey("FAC_ATTR_CREDIT_SCORE");
			List<FacilityCustomerRole> borrowerRoles = request.getAllCustomerRolesInRoles("PARTY_ROLE_TYPE_BORROWER");
		 
			List<BureauReport> reports = new ArrayList<BureauReport>();
			int maxFicoScore = 0;
			for (FacilityCustomerRole role : borrowerRoles) {
				Customer customer = null;
				if (role.getCustomer() != null && role.getCustomer().isIndividual()) {
					customer = role.getCustomer();
				} 
				if (customer != null && customer.isIndividual()) {
					Map<String,BureauReport> reportMap = request.getLatestBureauReports(customer);
					for (String reportName : reportMap.keySet()) {
						BureauReport report = reportMap.get(reportName);
						int ficoScore =0;
						if(report.getFicoScore()!=null && !report.getFicoScore().equals("")) {
							int total=Integer.parseInt(report.getFicoScore());
							attr.setValue(String.valueOf(total));	
						}
					}
				}else if (customer != null && customer.isNonIndividual()) {
					Map<String,BureauReport> reportMap = request.getLatestBureauReports(customer);
					for (String reportName : reportMap.keySet()) {
						BureauReport report = reportMap.get(reportName);
						if(report.getFicoScore()!=null && !report.getFicoScore().equals("")) {
							int total=Integer.parseInt(report.getFicoScore());
							attr.setValue(String.valueOf(total));	
						}
					}
				}					
			}
		}
					
end